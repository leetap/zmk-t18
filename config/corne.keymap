#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&led_strip {
    chain-length = <0>;

    // chain-length = <27>;
    // 21 backlight + 6 glowlight
};

#define TAPPING_TERM 200

/ {
    behaviors {
        /*
    * td_lock groups locking functions into one key:
    *  - tap once to lock the host
    *  - tap twice to put the host to sleep
    */

        td_lock: tap_dance_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LOCK";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp LG(LC(Q))>, <&kp LG(LA(C_EJECT))>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Clear_BLE_Profile {
            bindings = <&bt BT_CLR>;
            key-positions = <0 38 5>;
        };

        Space {
            bindings = <&kp SPACE>;
            key-positions = <29 28>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <17 16>;
        };

        Capslock {
            bindings = <&kp CLCK>;
            key-positions = <5 6>;
        };
    };

    macros {
        git_status: git_status {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp S &kp T &kp A &kp T &kp U &kp S>;
            label = "GIT_STATUS";
        };

        git_commit_all: git_commit_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp C &kp O &kp M &kp M &kp I &kp T &kp SPACE &kp MINUS &kp A &kp MINUS &kp M &kp SPACE &kp DQT &kp DQT &kp LEFT_ARROW>;
            label = "GIT_COMMIT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
&kp CAPS    &kp Q  &kp W  &kp E         &kp R      &kp T                 &kp Y  &kp U      &kp I          &kp O    &kp P           &kp UP_ARROW
&kp LSHIFT  &kp A  &kp S  &kp D         &kp F      &kp G                 &kp H  &kp J      &kp K          &kp L    &kp LEFT_ARROW  &kp RIGHT_ARROW
&kp ESCAPE  &kp Z  &kp X  &kp C         &kp V      &kp B                 &kp N  &kp M      &kp COMMA      &kp DOT  &kp SEMI        &kp DOWN_ARROW
                          &kp LEFT_GUI  &kp RCTRL  &mt LEFT_SHIFT RET    &mo 1  &kp SPACE  &kp BACKSPACE
            >;
        };

        numsym {
            label = "SYMBOLS";
            bindings = <
&kp TAB         &kp N1      &kp N2      &kp N3        &kp N4     &kp N5                  &kp N6           &kp N7     &kp N8         &kp N9            &kp N0            &kp EQUAL
&kp TILDE       &kp EXCL    &kp AT      &kp HASH      &kp DLLR   &kp PRCNT               &kp PLUS         &kp MINUS  &kp APOS       &kp K_LOCK        &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&bt BT_CLR_ALL  &bt BT_CLR  &bt BT_NXT  &trans        &trans     &trans                  &kp PRINTSCREEN  &kp DEL    &kp LESS_THAN  &kp GREATER_THAN  &kp BACKSLASH     &kp SLASH
                                        &kp LEFT_WIN  &kp LCTRL  &mt LEFT_SHIFT ENTER    &mo 0            &kp SPACE  &kp BACKSPACE
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Activate_EXT {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
